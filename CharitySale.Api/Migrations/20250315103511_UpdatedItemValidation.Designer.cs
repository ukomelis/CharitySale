// <auto-generated />
using System;
using CharitySale.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CharitySale.Api.Migrations
{
    [DbContext(typeof(CharitySaleDbContext))]
    [Migration("20250315103511_UpdatedItemValidation")]
    partial class UpdatedItemValidation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CharitySale.Api.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Items", t =>
                        {
                            t.HasCheckConstraint("CK_Item_Price_Positive", "[Price] >= 0");

                            t.HasCheckConstraint("CK_Item_Quantity_NonNegative", "[Quantity] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e9f"),
                            Category = 0,
                            ImageUrl = "/images/brownie.jpg",
                            Name = "Brownie",
                            Price = 0.65m,
                            Quantity = 48
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e10"),
                            Category = 0,
                            ImageUrl = "/images/muffin.jpg",
                            Name = "Muffin",
                            Price = 1.00m,
                            Quantity = 36
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e11"),
                            Category = 0,
                            ImageUrl = "/images/cakepop.jpg",
                            Name = "Cake Pop",
                            Price = 1.35m,
                            Quantity = 24
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e12"),
                            Category = 0,
                            ImageUrl = "/images/appletart.jpg",
                            Name = "Apple tart",
                            Price = 1.50m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e13"),
                            Category = 0,
                            ImageUrl = "/images/water.jpg",
                            Name = "Water",
                            Price = 1.50m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e14"),
                            Category = 1,
                            ImageUrl = "/images/shirt.jpg",
                            Name = "Shirt",
                            Price = 2.00m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e15"),
                            Category = 1,
                            ImageUrl = "/images/pants.jpg",
                            Name = "Pants",
                            Price = 3.00m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e16"),
                            Category = 1,
                            ImageUrl = "/images/jacket.jpg",
                            Name = "Jacket",
                            Price = 4.00m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("81a130d2-502f-4cf1-a376-63edeb000e17"),
                            Category = 1,
                            ImageUrl = "/images/toy.jpg",
                            Name = "Toy",
                            Price = 1.00m,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("CharitySale.Api.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Sales", t =>
                        {
                            t.HasCheckConstraint("CK_Sale_TotalAmount_NonNegative", "[TotalAmount] >= 0");
                        });
                });

            modelBuilder.Entity("CharitySale.Api.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", t =>
                        {
                            t.HasCheckConstraint("CK_SaleItem_Quantity_Positive", "[Quantity] > 0");

                            t.HasCheckConstraint("CK_SaleItem_UnitPrice_NonNegative", "[UnitPrice] >= 0");
                        });
                });

            modelBuilder.Entity("CharitySale.Api.Entities.SaleItem", b =>
                {
                    b.HasOne("CharitySale.Api.Entities.Item", "Item")
                        .WithMany("SaleItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CharitySale.Api.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("CharitySale.Api.Entities.Item", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("CharitySale.Api.Entities.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
