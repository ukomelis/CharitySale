@page "/"
@using CharitySale.Web.Services
@using CharitySale.Shared.Models
@using CharitySale.Web.Models
@using CharitySale.Shared.Models.Enums
@using System.Net.Http.Json
@inject IItemService ItemService
@inject ISaleService SaleService

<h1>Charity Sale</h1>

@if (_loading)
{
    <div class="loading">Loading items...</div>
}
else
{
    <div class="items-grid">
        <div class="category">
            <h2>Food</h2>
            <div class="items">
                @foreach (var item in _items.Where(i => i.Category == Category.Food))
                {
                    <div class="item @(item.Quantity <= 0 ? "out-of-stock" : "")" @onclick="() => AddToCart(item)">
                        <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? $"/images/default-{item.Category.ToString().ToLower()}.png" : item.ImageUrl)" alt="@item.Name" />
                        <div class="item-info">
                            <h3>@item.Name</h3>
                            <p class="price">@item.Price.ToString("C")</p>
                            <p class="quantity">In stock: @item.Quantity</p>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="category">
            <h2>Clothes</h2>
            <div class="items">
                @foreach (var item in _items.Where(i => i.Category == Category.Clothes))
                {
                    <div class="item @(item.Quantity <= 0 ? "out-of-stock" : "")" @onclick="() => AddToCart(item)">
                        <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? $"/images/default-{item.Category.ToString().ToLower()}.png" : item.ImageUrl)" alt="@item.Name" />
                        <div class="item-info">
                            <h3>@item.Name</h3>
                            <p class="price">@item.Price.ToString("C")</p>
                            <p class="quantity">In stock: @item.Quantity</p>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="category">
            <h2>Other</h2>
            <div class="items">
                @foreach (var item in _items.Where(i => i.Category == Category.Other))
                {
                    <div class="item @(item.Quantity <= 0 ? "out-of-stock" : "")" @onclick="() => AddToCart(item)">
                        <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? $"/images/default-{item.Category.ToString().ToLower()}.png" : item.ImageUrl)" alt="@item.Name" />
                        <div class="item-info">
                            <h3>@item.Name</h3>
                            <p class="price">@item.Price.ToString("C")</p>
                            <p class="quantity">In stock: @item.Quantity</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="cart-section">
        <h2>Cart</h2>
        
        @if (_cart.TotalQuantity == 0)
        {
            <p>Your cart is empty. Click on items to add them to your cart.</p>
        }
        else
        {
            <div class="cart-items">
                @foreach (var item in _cart.Items)
                {
                    <div class="cart-item">
                        <div class="cart-item-info">
                            <span>@item.Name</span>
                            <span>@item.Price.ToString("C") x @item.Quantity</span>
                            <span>@item.TotalPrice.ToString("C")</span>
                        </div>
                        <div class="cart-item-actions">
                            <button @onclick="() => RemoveFromCart(item.ItemId)">-</button>
                        </div>
                    </div>
                }
            </div>
            
            <div class="cart-total">
                <h3>Total: @_cart.TotalAmount.ToString("C")</h3>
            </div>
            
            <div class="cart-actions">
                <button class="reset-button" @onclick="ResetCart">Reset</button>
                <button class="checkout-button" @onclick="ShowCheckoutModal">Checkout</button>
            </div>
        }
    </div>
}

@if (_showCheckoutModal)
{
    <div class="modal">
        <div class="modal-content">
            <h2>Checkout</h2>
            <p>Total amount: @_cart.TotalAmount.ToString("C")</p>
            
            <div class="form-group">
                <label for="amountPaid">Amount paid:</label>
                <input type="number" id="amountPaid" @bind="_amountPaid" step="0.01" min="@_cart.TotalAmount" />
                @if (_amountPaid < _cart.TotalAmount)
                {
                    <p class="error">Amount paid must be at least @_cart.TotalAmount.ToString("C")</p>
                }
            </div>
            
            <div class="modal-actions">
                <button @onclick="() => _showCheckoutModal = false">Cancel</button>
                <button @onclick="Checkout" disabled="@(_amountPaid < _cart.TotalAmount)">Complete Sale</button>
            </div>
        </div>
    </div>
}

@if (_showReceiptModal)
{
    <div class="modal">
        <div class="modal-content receipt">
            <h2>Receipt</h2>
            <p>Receipt Number: @_currentReceipt.ReceiptNumber</p>
            <p>Date: @_currentReceipt.SaleDate.ToString("g")</p>
            
            <h3>Items</h3>
            <div class="receipt-items">
                @foreach (var item in _currentReceipt.Items)
                {
                    <div class="receipt-item">
                        <span>@item.ItemName</span>
                        <span>@item.UnitPrice.ToString("C") x @item.Quantity</span>
                        <span>@(item.UnitPrice * item.Quantity).ToString("C")</span>
                    </div>
                }
            </div>
            
            <div class="receipt-summary">
                <p>Total Amount: @_currentReceipt.TotalAmount.ToString("C")</p>
                <p>Amount Paid: @_currentReceipt.AmountPaid.ToString("C")</p>
                <p>Change: @_currentReceipt.ChangeAmount.ToString("C")</p>
            </div>
            
            @if (_currentReceipt.Change.Any())
            {
                <h3>Change Breakdown</h3>
                <div class="change-breakdown">
                    @foreach (var change in _currentReceipt.Change)
                    {
                        <div class="change-item">
                            <span>@change.Name</span>
                            <span>x @change.Count</span>
                        </div>
                    }
                </div>
            }
            
            <div class="modal-actions">
                <button @onclick="CloseReceipt">Close</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Item> _items = new();
    private Cart _cart = new();
    private bool _loading = true;
    private bool _showCheckoutModal = false;
    private bool _showReceiptModal = false;
    private decimal _amountPaid;
    private Receipt _currentReceipt = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _items = await ItemService.GetAllItemsAsync();
            _loading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading items: {ex.Message}");
        }
    }
    
    private void AddToCart(Item item)
    {
        if (item.Quantity <= 0)
            return;
            
        _cart.AddItem(item);
        
        // Update item quantity in our local list
        var itemToUpdate = _items.Find(i => i.Id == item.Id);
        if (itemToUpdate != null)
        {
            itemToUpdate.Quantity--;
        }
    }
    
    private void RemoveFromCart(Guid itemId)
    {
        var cartItem = _cart.Items.FirstOrDefault(i => i.ItemId == itemId);
        if (cartItem != null)
        {
            _cart.RemoveItem(itemId);
            
            // Update item quantity in our local list
            var itemToUpdate = _items.Find(i => i.Id == itemId);
            if (itemToUpdate != null)
            {
                itemToUpdate.Quantity++;
            }
        }
    }
    
    private void ResetCart()
    {
        // Restore quantities to items
        foreach (var cartItem in _cart.Items)
        {
            var itemToUpdate = _items.Find(i => i.Id == cartItem.ItemId);
            if (itemToUpdate != null)
            {
                itemToUpdate.Quantity += cartItem.Quantity;
            }
        }
        
        _cart.Clear();
    }
    
    private void ShowCheckoutModal()
    {
        if (_cart.TotalQuantity == 0)
            return;
            
        _amountPaid = _cart.TotalAmount;
        _showCheckoutModal = true;
    }
    
    private async Task Checkout()
    {
        if (_amountPaid < _cart.TotalAmount)
            return;
            
        try
        {
            var createSale = _cart.ToCreateSale(_amountPaid);
            var sale = await SaleService.CreateSaleAsync(createSale);
            
            // Update item quantities on the server
            foreach (var item in _cart.Items)
            {
                var serverItem = await ItemService.GetItemByIdAsync(item.ItemId);
                await ItemService.UpdateItemQuantityAsync(serverItem.Id, serverItem.Quantity);
            }
            
            _currentReceipt = new Receipt
            {
                SaleId = sale.Id,
                ReceiptNumber = $"CS-{DateTime.Now:yyyyMMddHHmmss}",
                SaleDate = sale.CreatedAt,
                TotalAmount = sale.TotalAmount,
                AmountPaid = sale.AmountPaid,
                ChangeAmount = sale.ChangeAmount,
                Items = sale.Items,
                Change = sale.Change
            };
            
            _showCheckoutModal = false;
            _showReceiptModal = true;
            _cart.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing checkout: {ex.Message}");
        }
    }
    
    private void CloseReceipt()
    {
        _showReceiptModal = false;
        _currentReceipt = new Receipt();
    }
}

<style>
    .items-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        margin-bottom: 2rem;
    }
    
    .category {
        flex: 1;
        min-width: 300px;
    }
    
    .items {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
    }
    
    .item {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .item:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .item img {
        width: 100%;
        height: 120px;
        object-fit: cover;
        border-radius: 4px;
    }
    
    .item-info {
        margin-top: 0.5rem;
    }
    
    .item h3 {
        margin: 0;
        font-size: 1rem;
    }
    
    .price {
        font-weight: bold;
        color: #e53935;
        margin: 0.25rem 0;
    }
    
    .quantity {
        font-size: 0.8rem;
        color: #666;
        margin: 0;
    }
    
    .out-of-stock {
        opacity: 0.5;
        pointer-events: none;
    }
    
    .out-of-stock img {
        filter: grayscale(1);
    }
    
    .cart-section {
        background-color: #f5f5f5;
        padding: 1.5rem;
        border-radius: 8px;
        margin-top: 2rem;
    }
    
    .cart-items {
        margin: 1rem 0;
    }
    
    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #ddd;
    }
    
    .cart-item-info {
        display: flex;
        justify-content: space-between;
        width: 70%;
    }
    
    .cart-item-actions button {
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
    }
    
    .cart-total {
        margin: 1rem 0;
        text-align: right;
    }
    
    .cart-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }
    
    .reset-button {
        background-color: #f44336;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .checkout-button {
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    
    .modal-content {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        width: 500px;
        max-width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }
    
    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1.5rem;
    }
    
    .form-group {
        margin: 1rem 0;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
    }
    
    .form-group input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .error {
        color: #f44336;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }
    
    .receipt {
        width: 400px;
    }
    
    .receipt-items {
        margin: 1rem 0;
    }
    
    .receipt-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }
    
    .receipt-summary {
        margin: 1rem 0;
        padding: 1rem 0;
        border-top: 1px solid #ddd;
        border-bottom: 1px solid #ddd;
    }
    
    .change-breakdown {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    
    .change-item {
        display: flex;
        justify-content: space-between;
        background-color: #f5f5f5;
        padding: 0.5rem;
        border-radius: 4px;
    }
    
    .loading {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
        font-size: 1.2rem;
    }
</style>